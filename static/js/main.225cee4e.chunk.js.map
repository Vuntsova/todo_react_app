{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","setStyle","backgroundColor","props","todo","completed","textDecoration","padding","borderBottom","isBoxChecked","this","id","title","className","style","type","checked","onChange","markCompleted","bind","onClick","deleteItem","Component","Todos","todos","map","key","editItem","Header","to","AddTodo","state","getValue","e","setState","target","name","value","SubmitTodo","placeholder","About","App","uuid","v4","console","log","filter","newTodo","exact","path","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.225cee4e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'; \n// import TodoItem from './css/TodoItem.css'\n\nexport class TodoItem extends Component {\n    setStyle = () => {\n        return {\n            backgroundColor: !this.props.todo.completed ? '#ccc' : '#ffc107',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none',\n            padding: '5px',\n            borderBottom: '1px #000 dotted'\n        }\n    }\n\n    isBoxChecked = () => {\n        return !this.props.todo.completed ? false :true\n    }\n    \n    render() {\n        \n        const {id, title} = this.props.todo;\n        return (\n            <div className=\"container\">\n                <div className=\"row pb-2\">\n                    <div className='col-9 col-md-11 text-left'  style = {this.setStyle()}>\n                        <input type=\"checkbox\" checked={this.isBoxChecked()} onChange={this.props.markCompleted.bind(this,id)}/>\n                        {\" \"}{title}\n                    </div>\n                    <div className='col-3 col-md-1 text-right'>\n                        <div className='btn-group'>\n                        <button \n                            type=\"button\" \n                            className=\"btn btn-danger delete\"\n                            onClick={this.props.deleteItem.bind(this,id)}\n                        >Delete</button>\n                        </div>\n                    </div>\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nexport default TodoItem\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'; \nimport TodoItem from './TodoItem'\n\nexport class Todos extends Component {\n    render() {\n        return (\n            <div className=\"jumbotron text-center container\">\n                {\n                    this.props.todos.map(\n                        (todo) => <TodoItem \n                        key={todo.id} \n                        todo={todo}\n                        markCompleted={this.props.markCompleted}\n                        editItem={this.props.editItem}\n                        deleteItem={this.props.deleteItem}\n                        ></TodoItem>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired\n}\n\nexport default Todos\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\n\nfunction Header() {\n    return (\n        <header className=\"container text-center bg-warning p-3 mt-5\">\n            <h2>To Do List</h2>\n            <h5>\n            <Link to=\"/\">Home</Link>{\" | \"}\n                <Link to=\"/about\">About</Link>\n            </h5>\n        </header>\n    )\n}\n\nexport default Header\n","import React, { Component } from 'react'\n\nexport class AddTodo extends Component {\n    \n    state = {\n        title: \"\"\n    }\n\n    getValue = (e) =>{\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    SubmitTodo = () => {\n        this.props.AddTodo(this.state.title)\n        this.setState({\n            title: \"\"\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container text-center bg-warning input-group pb-3\">\n                <input \n                    type=\"text\" \n                    name=\"title\"\n                    className=\"form-control\" \n                    placeholder=\"Add to the list\"\n                    value={this.state.title}\n                    onChange={this.getValue}/>\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-success\" onClick={this.SubmitTodo} type=\"submit\">Button</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AddTodo\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <div className=\"container jumbotron text-center\">\n            <h3>This ABOUT page demonstrates how React Route works</h3>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Todos from './components/Todos'\nimport Header from './components/layout/Header'\nimport AddTodo from \"./components/AddTodo\"\nimport About from \"./components/About\"\nimport uuid from 'uuid';\n\n\nexport class App extends Component {\n  state = {\n    todos: [\n      {\n        id:uuid.v4(),\n        title: \"Task 1\",\n        completed: true\n      },\n      {\n        id:uuid.v4(),\n        title: \"Task 2\",\n        completed: false\n      },\n      {\n        id:uuid.v4(),\n        title: \"Task 3\",\n        completed: false\n      },\n      {\n        id:uuid.v4(),\n        title: \"Task 4\",\n        completed: false\n      },\n      {\n        id:uuid.v4(),\n        title: \"Task 5\",\n        completed: false\n      },\n      {\n        id:uuid.v4(),\n        title: \"Task 6\",\n        completed: false\n      }\n    ]\n  }\n\n  markCompleted = (id) => {\n    this.setState(\n      {\n        todos: this.state.todos.map(\n          (todo) => {\n            if(todo.id === id){\n              todo.completed = !todo.completed\n            }\n            return todo;\n          }\n        )\n    \n      }\n    )\n  }\n\n  editItem =() => {\n    console.log(\"edit item\")\n  }\n\n  deleteItem =(id) => {\n    this.setState(\n      {\n        todos: [...this.state.todos.filter(todo=>todo.id!==id)]\n      }\n    )\n  }\n\n  AddTodo = (title) => {\n    const newTodo = {\n      id: uuid.v4(),\n      title,\n      completed: false\n    }\n    this.setState({todos: [...this.state.todos, newTodo]})\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Header/>\n          <Route exact path=\"/\" render={props=>(\n            <React.Fragment>\n              <AddTodo AddTodo={this.AddTodo}></AddTodo>\n              <Todos \n              todos={this.state.todos}\n              markCompleted = {this.markCompleted}\n              editItem = {this.editItem}\n              deleteItem = {this.deleteItem}\n              ></Todos>\n            </React.Fragment>\n          )}/>\n          <Route exact path=\"/about\" component={About} />\n          \n      </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}